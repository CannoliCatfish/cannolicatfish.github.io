"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[456],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return h}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),m=s(n),h=o,d=m["".concat(p,".").concat(h)]||m[h]||c[h]||a;return n?r.createElement(d,i(i({ref:t},u),{},{components:n})):r.createElement(d,i({ref:t},u))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=m;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var s=2;s<a;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},6445:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return p},metadata:function(){return s},toc:function(){return u},default:function(){return m}});var r=n(7462),o=n(3366),a=(n(7294),n(3905)),i=["components"],l={},p="Evaporation JSON Format",s={unversionedId:"developer-wiki/evaporation-json-format",id:"developer-wiki/evaporation-json-format",isDocsHomePage:!1,title:"Evaporation JSON Format",description:"A recipe type that is used by the Evaporation Boiler and Evaporation Tower structures.",source:"@site/docs/developer-wiki/evaporation-json-format.md",sourceDirName:"developer-wiki",slug:"/developer-wiki/evaporation-json-format",permalink:"/docs/next/developer-wiki/evaporation-json-format",editUrl:"https://github.com/CannoliCatfish/cannolicatfish.github.io/docs/developer-wiki/evaporation-json-format.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Element JSON Format",permalink:"/docs/next/developer-wiki/element-json-format"},next:{title:"Fusion Furnace JSON Format",permalink:"/docs/next/developer-wiki/fusion-furnace-json-format"}},u=[{value:"General variables:",id:"general-variables",children:[],level:3},{value:"output# specific variables:",id:"output-specific-variables",children:[],level:3},{value:"Example 1: Evaporating resin in a Evaporation Boiler",id:"example-1-evaporating-resin-in-a-evaporation-boiler",children:[],level:3},{value:"Example 2: Evaporating water in an Evaporation Tower located in any Ocean Biome and the Snowy Beach biome",id:"example-2-evaporating-water-in-an-evaporation-tower-located-in-any-ocean-biome-and-the-snowy-beach-biome",children:[],level:3}],c={toc:u};function m(e){var t=e.components,n=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"evaporation-json-format"},"Evaporation JSON Format"),(0,a.kt)("p",null,"A recipe type that is used by the Evaporation Boiler and Evaporation Tower structures. "),(0,a.kt)("h3",{id:"general-variables"},"General variables:"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"large"),": Boolean, set to true by default. Determines whether the Evaporation Tower (true) or Evaporation Boiler (false) structure should be used."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"biomes"),": JSON array (string). Each entry in the array is used to determine which biomes this recipe works in. The format is the following:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},'For single biomes, use the string "B#" before the resource location. (ex. "B#minecraft:snowy_tundra").'),(0,a.kt)("li",{parentName:"ul"},'For biome categories, use the string "C#" before the string used for the category. (ex. "C#taiga").')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"total"),": Integer. Has to be defined once by the recipe. Set this value equal to the number of outputs used in the recipe."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"large"),": Boolean, set to true by default. Determines whether the Evaporation Tower (true) or Evaporation Boiler (false) structure should be used."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"cookTime"),": Integer. Determines the number of ticks required until recipe completion. Evaporation Towers can increase height to decrease processing time."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"input"),': JSON object. Inside this object is the variable "block" which must be set to the fluid that will be placed in the structure. '),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"bucket"),': JSON object. Inside this object is the variable "item"/"tag" which is set to help with JEI integration. The item/tag provided does not have to be a bucket. This is mainly used to tell the player which liquid they need to place in the structure.'),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"output#"),': JSON object. The "#" should be replaced in sequential numerical order for proper recipe population, starting at 1.  '),(0,a.kt)("h3",{id:"output-specific-variables"},"output# specific variables:"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"item"),": Defines the item that will be outputted."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"weight"),": Int. Set to 0 by default. Represents the likelihood of this item to be chosen as the random output from the sluicing process. Higher weights equal a higher likelihood."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"min"),": Int. Set to 1 by default. Represents the lowest possible count that can be produced if this item is the result."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"max"),": Int. Set to 1 by default. Represents the highest possible count that can be produced if this item is the result."),(0,a.kt)("h3",{id:"example-1-evaporating-resin-in-a-evaporation-boiler"},"Example 1: Evaporating resin in a Evaporation Boiler"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'{\n  "type": "rankine:evaporation",\n  "large": false,\n  "total": 1,\n  "cookTime": 1200,\n  "input": {\n    "block": "rankine:resin"\n  },\n  "bucket": {\n    "item": "rankine:resin_bucket"\n  },\n  "output1": {\n    "item": "rankine:amber",\n    "weight": 1\n  }\n}\n')),(0,a.kt)("h3",{id:"example-2-evaporating-water-in-an-evaporation-tower-located-in-any-ocean-biome-and-the-snowy-beach-biome"},"Example 2: Evaporating water in an Evaporation Tower located in any Ocean Biome and the Snowy Beach biome"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'{\n  "type": "rankine:evaporation",\n  "total": 3,\n  "biomes": ["C#ocean","B#minecraft:snowy_beach"],\n  "input": {\n    "block": "minecraft:water"\n  },\n  "bucket": {\n    "item": "minecraft:water_bucket"\n  },\n  "output1": {\n    "item": "rankine:bromine_nugget",\n    "weight": 1\n  },\n  "output2": {\n    "item": "rankine:iodine_nugget",\n    "weight": 1\n  },\n  "output3": {\n    "item": "rankine:salt",\n    "weight": 80\n  }\n}\n')))}m.isMDXComponent=!0}}]);